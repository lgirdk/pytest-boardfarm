[build-system]
    build-backend = "flit_core.buildapi"
    requires      = ["flit_core >=3.2,<4"]

[project]
    authors = [
        { name = "Various", email = "t&iconnectivityboardfarm@libertyglobal.com" },
    ]
    name = "pytest_boardfarm3"
    readme = "README.md"

    classifiers = [
        "Intended Audience :: Developers",
        "Intended Audience :: Information Technology",
        "Intended Audience :: Telecommunications Industry",
        "License :: OSI Approved :: BSD License",
        "Programming Language :: Python :: 3",
        "Topic :: Software Development :: Embedded Systems",
        "Topic :: Software Development :: Quality Assurance",
        "Topic :: Software Development :: Testing",
        "Topic :: Software Development :: Testing :: Acceptance",
    ]
    dynamic = ['version', 'description']
    requires-python = ">=3.9"

    dependencies = [
        "pytest",
        "boardfarm3>=1.0.0",
        "pytest-html==4.*",
        "pytest-instafail",
        "pytest-randomly",
    ]

    [project.optional-dependencies]
        dev = [
            "darglint2==v1.8.2",
            "flake8",
            "flake8-bugbear",
            "flake8-docstrings",
            "flake8-rst",
            "flake8-rst-docstrings",
            "mypy",
            "nox",
            "pre-commit",
            "pylint",
            "ruff==v0.4.2",
        ]
        doc = ["sphinx"]
        test = [
            "pytest-cov",
            "pytest-mock",
        ]

    [project.urls]
        Source = "https://github.com/lgirdk/pytest-boardfarm"

    [project.entry-points."pytest11"]
        pytest_boardfarm = "pytest_boardfarm3.pytest_plugin"

[tool.commitizen]
    bump_message = "Bump version to $new_version"
    name = "cz_conventional_commits"
    style = [
        ["qmark", "fg:#ff9d00 bold"],
        ["question", "bold"],
        ["answer", "fg:#ff9d00 bold"],
        ["pointer", "fg:#ff9d00 bold"],
        ["highlighted", "fg:#ff9d00 bold"],
        ["selected", "fg:#cc5454"],
        ["separator", "fg:#cc5454"],
        ["instruction", ""],
        ["text", ""],
        ["disabled", "fg:#858585 italic"],
    ]
    tag_format = "$version"
    version = "1.0.0"
    version_files = [
        "pytest_boardfarm3/__init__.py:version",
        "pyproject.toml:version",
        "pyproject.toml:current",
    ]

[tool.mypy]
    disallow_untyped_defs  = true
    ignore_missing_imports = true
    no_strict_optional     = true
    pretty                 = true
    show_error_codes       = true
    warn_redundant_casts   = true
    warn_unreachable       = true

[tool.tbump]

    [tool.tbump.version]
        current = "1.0.0"

        # Example of a semver regexp.
        # Make sure this matches current_version before
        # using tbump
        regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

    [tool.tbump.git]
        message_template = "Bump to {new_version}"
        tag_template     = "{new_version}"

    # For each file to patch, there is a [[tool.tbump.file]] config
    # section containing the path of the file, relative to the
    # pyproject.toml location.
    [[tool.tbump.file]]
        src = "pytest_boardfarm3/__init__.py"

    [[tool.tbump.file]]
        src = "pyproject.toml"

[tool.ruff]
    # Exclude a variety of commonly ignored directories.
        exclude = [
            ".bzr",
            ".direnv",
            ".eggs",
            ".git",
            ".git-rewrite",
            ".hg",
            ".mypy_cache",
            ".nox",
            ".pants.d",
            ".pytype",
            ".ruff_cache",
            ".svn",
            ".tox",
            ".venv",
            "__pypackages__",
            "_build",
            "buck-out",
            "build",
            "dist",
            "node_modules",
            "venv",
        ]

    line-length = 88

    target-version = "py39"

    [tool.ruff.lint]
        ignore = [
        "ANN101", # annotation of self object
        "ANN204", # annotation of __init__()
        "D203",
        "D213",
        "FBT",    # boolean trap, no clear solution
        "N",      # naming convention, already covered by pylint
        "PT003",  # allow scope=function to be explicitly passed to fixtures
        "SIM114", # simplify if-elif by AND/OR combinations
        "TD",     # would conflict with TODO highligther
        "COM812", # The following rule may cause conflicts when used with the formatter
        "ISC001", # The following rule may cause conflicts when used with the formatter
    ]
        select = ["ALL"]

    # Allow autofix for all enabled rules (when `--fix`) is provided.
        fixable = ["ALL"]

        unfixable = [
            "F401", # unused imports - we must know if we forgot something...
        ]
    [tool.ruff.lint.per-file-ignores]
        "unittests/*" = [
            "INP001",  # pytest works this way
            "S101",    # we do use assert in unit test written for pytest
            "D103",    # doc-strings are not mandatory for unittests
            "SLF001",  # we do access private members for validation in unittests
            "E501",    # line too long errors are ignored for unittests
            "ANN401",  # dynamically typed expressions (typing.Any) are used in arguments
            "PLR2004", # Magic value used in comparison
        ]

    [tool.ruff.lint.mccabe]
        # Unlike Flake8, default to a complexity level of 10.
        max-complexity = 10

    [tool.ruff.format]
        # Enable reformatting of code snippets in docstrings.
        docstring-code-format = true
